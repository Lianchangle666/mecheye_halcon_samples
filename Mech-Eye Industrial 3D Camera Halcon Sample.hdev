<?xml version="1.0" encoding="UTF-8"?>
<hdevelop file_version="1.2" halcon_version="20.11.1.2">
<procedure name="main">
<interface/>
<body>
<c>*</c>
<c>* Example for the usage of Mech-Eye Industrial 3D Camera In HALCON </c>
<c>*</c>
<c>* Open the first found Mech-Eye Industrial 3D Camera with GigEVision2 interface.</c>
<l>info_framegrabber ('GigEVision2', 'device', Info, DeviceInfos)</l>
<l>tuple_regexp_select(DeviceInfos, 'MechEye', MechEyeCameraInfos)</l>
<c></c>
<c>* Could not find any Mech-Eye Industrial 3D Cameras.</c>
<l>if (not |MechEyeCameraInfos|)</l>
<l>    stop()</l>
<l>endif</l>
<c></c>
<c>* Open the Mech-Eye Industrial 3D Camera.</c>
<l>open_framegrabber ('GigEVision2', 1, 1, 0, 0, 0, 0, 'default', -1, 'default', -1, 'false', 'default', MechEyeCameraInfos[1], 0, -1, AcqHandle)</l>
<c></c>
<l>get_framegrabber_param (AcqHandle, 'available_param_names', ParameterValues)</l>
<c></c>
<l>set_framegrabber_param (AcqHandle, 'grab_timeout', 8000)</l>
<l>set_framegrabber_param (AcqHandle, '[Stream]GevStreamMaxPacketGaps', 500)</l>
<c></c>
<c>* Switch to the 2D scanning mode.</c>
<l>set_framegrabber_param (AcqHandle, 'DeviceScanType', 'Areascan')</l>
<l>set_framegrabber_param (AcqHandle, 'AcquisitionMode', 'SingleFrame')</l>
<c></c>
<l>get_framegrabber_param (AcqHandle, 'Width', Width)</l>
<l>get_framegrabber_param (AcqHandle, 'Height', Height)</l>
<l>get_framegrabber_param (AcqHandle, 'PixelFormat', PixeLFormat)</l>
<c></c>
<c>* Set the 2D scanning parameters.</c>
<l>set_framegrabber_param (AcqHandle, 'Scan2DExposureMode', 'Timed')</l>
<l>set_framegrabber_param (AcqHandle, 'Scan2DExposureTime', 100)</l>
<c></c>
<c>* Acquire the 2D image from the camera.</c>
<l>grab_image (Image2d, AcqHandle)</l>
<c>* Save the 2D image result in "Image2d.bmp"</c>
<l>write_image( Image2d , 'bmp' , 0 , 'Image2d' )</l>
<c></c>
<c>* Switch to the 3D scanning mode:</c>
<l>set_framegrabber_param (AcqHandle, 'DeviceScanType', 'Areascan3D')</l>
<c></c>
<c>* Open the 3D object model generator.</c>
<l>set_framegrabber_param (AcqHandle, 'create_objectmodel3d', 'enable')</l>
<l>set_framegrabber_param (AcqHandle, 'add_objectmodel3d_overlay_attrib', 'enable')</l>
<c></c>
<l>get_framegrabber_param (AcqHandle, 'Width', Width)</l>
<l>get_framegrabber_param (AcqHandle, 'Height', Height)</l>
<l>get_framegrabber_param (AcqHandle, 'PixelFormat', PixeLFormat)</l>
<c></c>
<c>* Set the 3D scanning exposure time parameter.</c>
<l>set_framegrabber_param (AcqHandle, 'Scan3DExposureCount', 1)</l>
<l>set_framegrabber_param (AcqHandle, 'Scan3DExposureTime', 8)</l>
<c></c>
<c>* Set the 3D scanning depth range parameter(unit: mm).</c>
<l>set_framegrabber_param (AcqHandle, 'DepthLowerLimit', 1)</l>
<l>set_framegrabber_param (AcqHandle, 'DepthUpperLimit', 3000)</l>
<c></c>
<c>* Set the 3D scanning point cloud filter parameter.</c>
<l>set_framegrabber_param (AcqHandle, 'CloudOutlierFilterMode', 'Normal')</l>
<l>set_framegrabber_param (AcqHandle, 'CloudSmoothMode', 'Normal')</l>
<c></c>
<c>* Acquire the 3D data from the camera.</c>
<l>grab_data(Image3d, Region, Contours, AcqHandle, ObjectModel3D)</l>
<c></c>
<l>get_object_model_3d_params(ObjectModel3D, 'num_points', NumOfPoints)</l>
<c></c>
<l>if(NumOfPoints != 0)</l>
<c>    * Save the point cloud result in "PointCloud.ply"</c>
<l>    write_object_model_3d (ObjectModel3D, 'ply', 'PointCloud.ply', [], [])</l>
<l>endif</l>
<c></c>
<c>* Display the 3D object model.</c>
<l>dev_open_window (0, 0, Width, Height, 'black', WindowHandle3d)</l>
<l>visualize_object_model_3d (WindowHandle3d, ObjectModel3D, [], [], [], [], [], [], [], PoseOut)</l>
<l>dev_close_window ()</l>
<c></c>
<l>clear_object_model_3d (ObjectModel3D)</l>
<l>close_framegrabber (AcqHandle)</l>
<c></c>
</body>
<docu id="main">
<parameters/>
</docu>
</procedure>
<procedure name="addOffset">
<interface/>
<body>
<l>convert_image_type (x, rReal, 'real')</l>
<l>scale_image (rReal, rRealWithOffest, 1, offest)</l>
<l>scale_image (rRealWithOffest, rRealWithOffest, scale, 0)</l>
<l>return ()</l>
</body>
<docu id="addOffset">
<parameters/>
</docu>
</procedure>
<procedure name="decode">
<interface>
<io>
<par name="X" base_type="iconic" dimension="0"/>
<par name="Y" base_type="iconic" dimension="0"/>
<par name="Z" base_type="iconic" dimension="0"/>
</io>
<oo>
<par name="DecodedX" base_type="iconic" dimension="0"/>
<par name="DecodedY" base_type="iconic" dimension="0"/>
<par name="DecodedZ" base_type="iconic" dimension="0"/>
</oo>
<ic>
<par name="Scale" base_type="ctrl" dimension="0"/>
<par name="Offset" base_type="ctrl" dimension="0"/>
</ic>
</interface>
<body>
<c></c>
<l>convert_image_type (X, xReal, 'real')</l>
<l>scale_image (xReal, DecodedX, Scale, 0)</l>
<l>scale_image (DecodedX, DecodedX, 1, Offset)</l>
<c></c>
<l>convert_image_type (Y, yReal, 'real')</l>
<l>scale_image (yReal, DecodedY, Scale, 0)</l>
<l>scale_image (DecodedY, DecodedY, 1, Offset)</l>
<c></c>
<l>convert_image_type (Z, zReal, 'real')</l>
<l>scale_image (zReal, DecodedZ, Scale, 0)</l>
<l>scale_image (DecodedZ, DecodedZ, 1, Offset)</l>
<l>return ()</l>
</body>
<docu id="decode">
<parameters>
<parameter id="DecodedX"/>
<parameter id="DecodedY"/>
<parameter id="DecodedZ"/>
<parameter id="Offset"/>
<parameter id="Scale"/>
<parameter id="X"/>
<parameter id="Y"/>
<parameter id="Z"/>
</parameters>
</docu>
</procedure>
</hdevelop>
